{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Instalando e importando as bibliotecas tweepy (para acessar a API do twitter) e pymongo (para conectar no banco mongo e armazenar os tweets, esse banco de dados seria um Data Staging Area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "x4s92uQ47Orm"
   },
   "outputs": [],
   "source": [
    "# !pip install pymongo\n",
    "# !pip install tweepy\n",
    "\n",
    "from pymongo import MongoClient\n",
    "import tweepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 191
    },
    "colab_type": "code",
    "id": "lCR_omHan2UB",
    "outputId": "3775a948-7059-410f-a915-a8152891e5e5"
   },
   "outputs": [],
   "source": [
    "consumer_key = 'rvY15wPTQqIS8FhW9up66IIa1'\n",
    "consumer_secret_key = 'ub6D0RdPIWbfzWnKsOi6BCjpMNTcC16kFhrKQRGKUPfNLYXskV'\n",
    "\n",
    "access_token = '610407857-gGrcIDCMg7CRAqCc7Wm2qhQlNmgZ6f3DZTNJ7ZVW'\n",
    "access_secret_token = 'ZCEXOixbsKKHKJBFiwJrpW7kB3C4eUhUTBgKsLcKeCFPm'\n",
    "\n",
    "authentication = tweepy.OAuthHandler(consumer_key, consumer_secret_key)\n",
    "authentication.set_access_token(access_token, access_secret_token)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "QcNf4X3qrg4L",
    "outputId": "b00605f8-431b-439c-ab78-397c34c9fed7",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "twitter = tweepy.API(authentication)\n",
    "\n",
    "resultados = []\n",
    "\n",
    "\n",
    "#Get the first 2000 items based on the search query extended is to get full data about tweets\n",
    "for tweet in tweepy.Cursor(twitter.search, q='balneario camboriu',  tweet_mode='extended').items(20000):\n",
    "    resultados.append(tweet)\n",
    "\n",
    "# Verify the number of items returned\n",
    "len(resultados)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 211
    },
    "colab_type": "code",
    "id": "6vDoFEUNrs3Y",
    "outputId": "9084e4c5-d5ed-4e9c-a20f-fe02e4a3f571"
   },
   "outputs": [],
   "source": [
    "for tweet in resultados:\n",
    "    print(f'Usuário: {tweet.user.screen_name} - Tweet: {tweet.full_text} \\n\\n')    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##conectando com o banco de dados e setando em qual collection os tweets serão incluidos "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "cliente = MongoClient()  #iniciando o client do mongo\n",
    "banco = cliente.tweets_python #conectando com o banco de dados\n",
    "tweets_collection = banco.tweets #escolhendo a collection na qual os tweets serão inseridos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 385
    },
    "colab_type": "code",
    "id": "Kl87K8E35r7x",
    "outputId": "daeb3341-eac0-484e-a604-b69ab9a41886"
   },
   "outputs": [],
   "source": [
    "import json\n",
    "resultados_json=[]\n",
    "for tweet in resultados:  #transformando o dado que retorna da api do twitter (list) em json para inserir no mongo\n",
    "  tweet_json = tweet._json\n",
    "  resultados_json.append(tweet_json) \n",
    "\n",
    "print(resultados_json)\n",
    "tweets_collection.insert_many(resultados_json) #inserindo os dados no banco"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "distinct_text = tweets_collection.distinct(\"id\", {\"retweeted\":False}) #consultando apenas os textos que são diferentes\n",
    "\n",
    "import pandas as pd\n",
    "df_distinct_text = pd.DataFrame(distinct_text) #criando um data frame com os textos distintos\n",
    "\n",
    "# export_csv = df_distinct_text.to_csv (r'/home/leonardo/dev/TCC/text.csv', index = None, header=False) #transformando o dataframe em csv pra facilitar a pré classificação\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3854"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(distinct_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_objects = tweets_collection.find({})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertManyResult at 0x7f849b660f88>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clientAtlas = MongoClient(\"mongodb+srv://leonardocroda:HLF2YMd3f1hf5cdo@classificar-tweets-srtwi.mongodb.net/admin?retryWrites=true&w=majority\")\n",
    "db = clientAtlas.classificar_tweets\n",
    "db.tweets.insert_many(all_objects)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3854"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distinct_text = db.tweets.distinct(\"id\")\n",
    "len(distinct_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "M4RIwlmr6q7k"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "#transformando o json em pandas dataframe para facilitar as analises\n",
    "def toDataFrame(tweets):\n",
    "  DataSet = pd.DataFrame()\n",
    "  DataSet['tweetID'] = [tweet.id for tweet in tweets]\n",
    "  DataSet['tweetText'] = [tweet.text for tweet in tweets]\n",
    "  DataSet['tweetSource'] = [tweet.source for tweet in tweets]\n",
    "  DataSet['tweetCreated'] = [tweet.created_at for tweet in tweets]\n",
    "  DataSet['userID'] = [tweet.user.id for tweet in tweets]\n",
    "  DataSet['userScreen'] = [tweet.user.screen_name for tweet in tweets]\n",
    "  DataSet['userLocation'] = [tweet.user.location for tweet in tweets]\n",
    "  DataSet['userTimezone'] = [tweet.user.time_zone for tweet in tweets]\n",
    "  return DataSet\n",
    "\n",
    "DataSet = toDataFrame(resultados)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 293
    },
    "colab_type": "code",
    "id": "D9zQ599J79Ik",
    "outputId": "edbcb774-abaf-484d-bba8-ecae9f921093"
   },
   "outputs": [],
   "source": [
    "DataSet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xPkosnOM8lrL"
   },
   "outputs": [],
   "source": [
    "len(DataSet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "obter_tweets.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
